{"ast":null,"code":"import { selector } from 'recoil';\nimport computeBoundingBox from '../utils/computeBoundingBox';\nimport { privateItemStateWithId, selectedIdsState } from './atoms';\nimport applyConstraints from '../utils/applyConstraints';\nimport { loadStatistics } from '../utils/statistics';\nimport memoize from '../utils/memoize';\nexport const statisticsQuery = memoize(id => selector({\n  key: `Statistics${id}`,\n  get: async ({\n    get\n  }) => {\n    let statistics = await loadStatistics(id);\n    return statistics;\n  }\n}));\nexport const itemWithId = memoize(id => selector({\n  key: `item${id}`,\n  get: ({\n    get\n  }) => {\n    const state = get(privateItemStateWithId(id));\n    return applyConstraints(state);\n  },\n  set: ({\n    set\n  }, newValue) => {\n    const state = privateItemStateWithId(id);\n    set(state, newValue);\n  }\n}));\n\nfunction itemsSelector(key, state) {\n  return selector({\n    key: `${key}`,\n    get: ({\n      get\n    }) => {\n      const ids = get(state);\n\n      if (!ids.length) {\n        return [];\n      }\n\n      return ids.map(id => get(itemWithId(id)));\n    },\n    set: ({\n      set\n    }, newValue) => {\n      newValue.forEach(item => {\n        let id = item.id;\n        set(itemWithId(id), item);\n      });\n    }\n  });\n}\n\nexport const selectedItemsSelector = itemsSelector('selectedItemsSelector', selectedIdsState);\nexport const selectionBoundingBox = selector({\n  key: 'selectionBoundingBox',\n  get: ({\n    get\n  }) => computeBoundingBox(get(selectedItemsSelector))\n});","map":{"version":3,"sources":["/Users/jesusvargas/Documents/GitHub/recoil-paint/src/recoil/selectors.js"],"names":["selector","computeBoundingBox","privateItemStateWithId","selectedIdsState","applyConstraints","loadStatistics","memoize","statisticsQuery","id","key","get","statistics","itemWithId","state","set","newValue","itemsSelector","ids","length","map","forEach","item","selectedItemsSelector","selectionBoundingBox"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,SAASC,sBAAT,EAAiCC,gBAAjC,QAAyD,SAAzD;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAO,MAAMC,eAAe,GAAGD,OAAO,CAACE,EAAE,IAAIR,QAAQ,CAAC;AACpDS,EAAAA,GAAG,EAAG,aAAYD,EAAG,EAD+B;AAEpDE,EAAAA,GAAG,EAAE,OAAO;AAAEA,IAAAA;AAAF,GAAP,KAAmB;AACtB,QAAIC,UAAU,GAAG,MAAMN,cAAc,CAACG,EAAD,CAArC;AACA,WAAOG,UAAP;AACD;AALmD,CAAD,CAAf,CAA/B;AAQP,OAAO,MAAMC,UAAU,GAAGN,OAAO,CAACE,EAAE,IAAIR,QAAQ,CAAC;AAC/CS,EAAAA,GAAG,EAAG,OAAMD,EAAG,EADgC;AAE/CE,EAAAA,GAAG,EAAE,CAAC;AAAEA,IAAAA;AAAF,GAAD,KAAa;AAChB,UAAMG,KAAK,GAAGH,GAAG,CAACR,sBAAsB,CAACM,EAAD,CAAvB,CAAjB;AACA,WAAOJ,gBAAgB,CAACS,KAAD,CAAvB;AACD,GAL8C;AAM/CC,EAAAA,GAAG,EAAE,CAAC;AAAEA,IAAAA;AAAF,GAAD,EAAUC,QAAV,KAAuB;AAC1B,UAAMF,KAAK,GAAGX,sBAAsB,CAACM,EAAD,CAApC;AACAM,IAAAA,GAAG,CAACD,KAAD,EAAQE,QAAR,CAAH;AACD;AAT8C,CAAD,CAAf,CAA1B;;AAYP,SAASC,aAAT,CAAuBP,GAAvB,EAA4BI,KAA5B,EAAmC;AACjC,SAAOb,QAAQ,CAAC;AACdS,IAAAA,GAAG,EAAG,GAAEA,GAAI,EADE;AAEdC,IAAAA,GAAG,EAAE,CAAC;AAAEA,MAAAA;AAAF,KAAD,KAAa;AAChB,YAAMO,GAAG,GAAGP,GAAG,CAACG,KAAD,CAAf;;AACA,UAAI,CAACI,GAAG,CAACC,MAAT,EAAiB;AACf,eAAO,EAAP;AACD;;AAED,aAAOD,GAAG,CAACE,GAAJ,CAAQX,EAAE,IAAIE,GAAG,CAACE,UAAU,CAACJ,EAAD,CAAX,CAAjB,CAAP;AACD,KATa;AAUdM,IAAAA,GAAG,EAAE,CAAC;AAAEA,MAAAA;AAAF,KAAD,EAAUC,QAAV,KAAuB;AAC1BA,MAAAA,QAAQ,CAACK,OAAT,CAAiBC,IAAI,IAAI;AACvB,YAAIb,EAAE,GAAGa,IAAI,CAACb,EAAd;AACAM,QAAAA,GAAG,CAACF,UAAU,CAACJ,EAAD,CAAX,EAAiBa,IAAjB,CAAH;AACD,OAHD;AAID;AAfa,GAAD,CAAf;AAiBD;;AAED,OAAO,MAAMC,qBAAqB,GAAGN,aAAa,CAAC,uBAAD,EAA0Bb,gBAA1B,CAA3C;AAEP,OAAO,MAAMoB,oBAAoB,GAAGvB,QAAQ,CAAC;AAC3CS,EAAAA,GAAG,EAAE,sBADsC;AAE3CC,EAAAA,GAAG,EAAE,CAAC;AAAEA,IAAAA;AAAF,GAAD,KAAaT,kBAAkB,CAACS,GAAG,CAACY,qBAAD,CAAJ;AAFO,CAAD,CAArC","sourcesContent":["import { selector } from 'recoil';\nimport computeBoundingBox from '../utils/computeBoundingBox';\nimport { privateItemStateWithId, selectedIdsState } from './atoms';\nimport applyConstraints from '../utils/applyConstraints';\nimport { loadStatistics } from '../utils/statistics';\nimport memoize from '../utils/memoize';\n\nexport const statisticsQuery = memoize(id => selector({\n  key: `Statistics${id}`,\n  get: async ({ get }) => {\n    let statistics = await loadStatistics(id);\n    return statistics;\n  },\n}));\n\nexport const itemWithId = memoize(id => selector({\n  key: `item${id}`,\n  get: ({ get }) => {\n    const state = get(privateItemStateWithId(id));\n    return applyConstraints(state);\n  },\n  set: ({ set }, newValue) => {\n    const state = privateItemStateWithId(id);\n    set(state, newValue);\n  }\n}));\n\nfunction itemsSelector(key, state) {\n  return selector({\n    key: `${key}`,\n    get: ({ get }) => {\n      const ids = get(state);\n      if (!ids.length) {\n        return [];\n      }\n\n      return ids.map(id => get(itemWithId(id)));\n    },\n    set: ({ set }, newValue) => {\n      newValue.forEach(item => {\n        let id = item.id;\n        set(itemWithId(id), item);\n      });\n    }\n  });\n}\n\nexport const selectedItemsSelector = itemsSelector('selectedItemsSelector', selectedIdsState);\n\nexport const selectionBoundingBox = selector({\n  key: 'selectionBoundingBox',\n  get: ({ get }) => computeBoundingBox(get(selectedItemsSelector))\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jesusvargas/Documents/GitHub/recoil-paint/src/components/canvas/CanvasItem.js\";\nimport React, { useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { createShape } from '../shapes';\nimport { selectedIdsState } from '../../recoil/atoms';\nimport { itemWithId } from '../../recoil/selectors';\nimport { useUpdateItem } from '../../recoil/hooks';\nimport useMove from '../../hooks/useMove';\nexport default function CanvasItem({\n  id\n}) {\n  const [itemSnapshot, setItemSnapshot] = useState(null);\n  const itemState = useRecoilValue(itemWithId(id));\n  const setSelectedIds = useSetRecoilState(selectedIdsState);\n  const updatePosition = useUpdateItem();\n  const {\n    onMouseDown\n  } = useMove(({\n    status,\n    origin,\n    offset\n  }) => {\n    if (status === 'start') {\n      setItemSnapshot(itemState);\n    }\n\n    if (status === 'moving' && itemSnapshot) {\n      updatePosition({ ...itemSnapshot,\n        x: itemSnapshot.x + offset.x,\n        y: itemSnapshot.y + offset.y\n      });\n    }\n\n    if (status === 'end') {\n      setItemSnapshot(null);\n      setSelectedIds(ids => {\n        if (origin.metaKey || origin.shiftKey) {\n          return [...ids, id];\n        }\n\n        return [id];\n      });\n    }\n  });\n  const Shape = createShape(itemState);\n\n  if (!Shape) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Shape, Object.assign({}, itemState, {\n    onMouseDown: onMouseDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/jesusvargas/Documents/GitHub/recoil-paint/src/components/canvas/CanvasItem.js"],"names":["React","useState","useRecoilValue","useSetRecoilState","createShape","selectedIdsState","itemWithId","useUpdateItem","useMove","CanvasItem","id","itemSnapshot","setItemSnapshot","itemState","setSelectedIds","updatePosition","onMouseDown","status","origin","offset","x","y","ids","metaKey","shiftKey","Shape"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,QAAlD;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AACzC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAMY,SAAS,GAAGX,cAAc,CAACI,UAAU,CAACI,EAAD,CAAX,CAAhC;AACA,QAAMI,cAAc,GAAGX,iBAAiB,CAACE,gBAAD,CAAxC;AACA,QAAMU,cAAc,GAAGR,aAAa,EAApC;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAkBR,OAAO,CAAC,CAAC;AAAES,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,GAAD,KAAgC;AAC9D,QAAIF,MAAM,KAAK,OAAf,EAAwB;AACtBL,MAAAA,eAAe,CAACC,SAAD,CAAf;AACD;;AAED,QAAII,MAAM,KAAK,QAAX,IAAuBN,YAA3B,EAAyC;AACvCI,MAAAA,cAAc,CAAC,EACb,GAAGJ,YADU;AAEbS,QAAAA,CAAC,EAAET,YAAY,CAACS,CAAb,GAAiBD,MAAM,CAACC,CAFd;AAGbC,QAAAA,CAAC,EAAEV,YAAY,CAACU,CAAb,GAAiBF,MAAM,CAACE;AAHd,OAAD,CAAd;AAKD;;AAED,QAAIJ,MAAM,KAAK,KAAf,EAAsB;AACpBL,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,MAAAA,cAAc,CAACQ,GAAG,IAAI;AACpB,YAAIJ,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAACM,QAA7B,EAAuC;AACrC,iBAAO,CAAC,GAAGF,GAAJ,EAASZ,EAAT,CAAP;AACD;;AACD,eAAO,CAACA,EAAD,CAAP;AACD,OALa,CAAd;AAMD;AACF,GAtB8B,CAA/B;AAwBA,QAAMe,KAAK,GAAGrB,WAAW,CAACS,SAAD,CAAzB;;AACA,MAAI,CAACY,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,sBAAO,oBAAC,KAAD,oBAAWZ,SAAX;AAAsB,IAAA,WAAW,EAAEG,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD","sourcesContent":["import React, { useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { createShape } from '../shapes';\nimport { selectedIdsState } from '../../recoil/atoms';\nimport { itemWithId } from '../../recoil/selectors';\nimport { useUpdateItem } from '../../recoil/hooks';\nimport useMove from '../../hooks/useMove';\n\nexport default function CanvasItem({ id }) {\n  const [itemSnapshot, setItemSnapshot] = useState(null);\n  const itemState = useRecoilValue(itemWithId(id));\n  const setSelectedIds = useSetRecoilState(selectedIdsState);\n  const updatePosition = useUpdateItem();\n\n  const { onMouseDown } = useMove(({ status, origin, offset }) => {\n    if (status === 'start') {\n      setItemSnapshot(itemState);\n    }\n\n    if (status === 'moving' && itemSnapshot) {\n      updatePosition({\n        ...itemSnapshot,\n        x: itemSnapshot.x + offset.x,\n        y: itemSnapshot.y + offset.y,\n      })\n    }\n\n    if (status === 'end') {\n      setItemSnapshot(null);\n      setSelectedIds(ids => {\n        if (origin.metaKey || origin.shiftKey) {\n          return [...ids, id];\n        }\n        return [id];\n      });\n    }\n  });\n\n  const Shape = createShape(itemState);\n  if (!Shape) {\n    return null;\n  }\n\n  return <Shape {...itemState} onMouseDown={onMouseDown} />;\n}\n"]},"metadata":{},"sourceType":"module"}
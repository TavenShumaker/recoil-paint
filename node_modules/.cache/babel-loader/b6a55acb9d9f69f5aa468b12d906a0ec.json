{"ast":null,"code":"var _jsxFileName = \"/Users/jesusvargas/Documents/GitHub/recoil-paint/src/components/toolbar/NewItemButton.js\";\nimport React, { useState } from 'react';\nimport { useSetRecoilState, useRecoilValue } from 'recoil';\nimport Button from '../common/Button';\nimport useMove from '../../hooks/useMove';\nimport { itemIdsState, canvasLayoutState, selectedIdsState } from '../../recoil/atoms';\nimport { useUpdateItem, useNewItem } from '../../recoil/hooks';\nexport default function NewItemButton({\n  newShapeProps = {},\n  ...others\n}) {\n  const [newItem, setNewItem] = useState(null);\n  const setItemIds = useSetRecoilState(itemIdsState);\n  const setSelectedIds = useSetRecoilState(selectedIdsState);\n  const canvasLayout = useRecoilValue(canvasLayoutState);\n  const createNewItem = useNewItem();\n  const updatePosition = useUpdateItem();\n  const {\n    onMouseDown\n  } = useMove(({\n    status,\n    origin,\n    offset\n  }) => {\n    if (status === 'start') {\n      setNewItem(null);\n      createNewItem({ ...newShapeProps,\n        x: origin.clientX - canvasLayout.x,\n        y: origin.clientY - canvasLayout.y\n      }).then(item => {\n        setNewItem(item);\n        setItemIds(items => [...items, item.id]);\n        setSelectedIds([]);\n      });\n    }\n\n    if (status === 'moving') {\n      if (newItem) {\n        updatePosition({ ...newItem,\n          x: origin.clientX + offset.x - canvasLayout.x,\n          y: origin.clientY + offset.y - canvasLayout.y\n        });\n      }\n    }\n\n    if (status === 'end') {\n      if (newItem) {\n        setNewItem(null);\n        setSelectedIds([newItem.id]);\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(Button, Object.assign({}, others, {\n    onMouseDown: onMouseDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/jesusvargas/Documents/GitHub/recoil-paint/src/components/toolbar/NewItemButton.js"],"names":["React","useState","useSetRecoilState","useRecoilValue","Button","useMove","itemIdsState","canvasLayoutState","selectedIdsState","useUpdateItem","useNewItem","NewItemButton","newShapeProps","others","newItem","setNewItem","setItemIds","setSelectedIds","canvasLayout","createNewItem","updatePosition","onMouseDown","status","origin","offset","x","clientX","y","clientY","then","item","items","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,QAAlD;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,YAAT,EAAuBC,iBAAvB,EAA0CC,gBAA1C,QAAkE,oBAAlE;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,oBAA1C;AAEA,eAAe,SAASC,aAAT,CAAuB;AAAEC,EAAAA,aAAa,GAAG,EAAlB;AAAsB,KAAGC;AAAzB,CAAvB,EAA0D;AACvE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMe,UAAU,GAAGd,iBAAiB,CAACI,YAAD,CAApC;AACA,QAAMW,cAAc,GAAGf,iBAAiB,CAACM,gBAAD,CAAxC;AACA,QAAMU,YAAY,GAAGf,cAAc,CAACI,iBAAD,CAAnC;AACA,QAAMY,aAAa,GAAGT,UAAU,EAAhC;AACA,QAAMU,cAAc,GAAGX,aAAa,EAApC;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAAkBhB,OAAO,CAAC,CAAC;AAAEiB,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,GAAD,KAAgC;AAC9D,QAAIF,MAAM,KAAK,OAAf,EAAwB;AACtBP,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,MAAAA,aAAa,CAAC,EACZ,GAAGP,aADS;AAEZa,QAAAA,CAAC,EAAEF,MAAM,CAACG,OAAP,GAAiBR,YAAY,CAACO,CAFrB;AAGZE,QAAAA,CAAC,EAAEJ,MAAM,CAACK,OAAP,GAAiBV,YAAY,CAACS;AAHrB,OAAD,CAAb,CAKGE,IALH,CAKQC,IAAI,IAAI;AACZf,QAAAA,UAAU,CAACe,IAAD,CAAV;AACAd,QAAAA,UAAU,CAACe,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWD,IAAI,CAACE,EAAhB,CAAV,CAAV;AACAf,QAAAA,cAAc,CAAC,EAAD,CAAd;AACD,OATH;AAUD;;AAED,QAAIK,MAAM,KAAK,QAAf,EAAyB;AACvB,UAAIR,OAAJ,EAAa;AACXM,QAAAA,cAAc,CAAC,EACb,GAAGN,OADU;AAEbW,UAAAA,CAAC,EAAEF,MAAM,CAACG,OAAP,GAAiBF,MAAM,CAACC,CAAxB,GAA4BP,YAAY,CAACO,CAF/B;AAGbE,UAAAA,CAAC,EAAEJ,MAAM,CAACK,OAAP,GAAiBJ,MAAM,CAACG,CAAxB,GAA4BT,YAAY,CAACS;AAH/B,SAAD,CAAd;AAKD;AACF;;AAED,QAAIL,MAAM,KAAK,KAAf,EAAsB;AACpB,UAAIR,OAAJ,EAAa;AACXC,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,cAAc,CAAC,CAACH,OAAO,CAACkB,EAAT,CAAD,CAAd;AACD;AACF;AACF,GA/B8B,CAA/B;AAmCA,sBAAO,oBAAC,MAAD,oBAAYnB,MAAZ;AAAoB,IAAA,WAAW,EAAEQ,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD","sourcesContent":["import React, { useState } from 'react';\nimport { useSetRecoilState, useRecoilValue } from 'recoil';\nimport Button from '../common/Button';\nimport useMove from '../../hooks/useMove';\nimport { itemIdsState, canvasLayoutState, selectedIdsState } from '../../recoil/atoms';\nimport { useUpdateItem, useNewItem } from '../../recoil/hooks';\n\nexport default function NewItemButton({ newShapeProps = {}, ...others }) {\n  const [newItem, setNewItem] = useState(null);\n  const setItemIds = useSetRecoilState(itemIdsState);\n  const setSelectedIds = useSetRecoilState(selectedIdsState);\n  const canvasLayout = useRecoilValue(canvasLayoutState);\n  const createNewItem = useNewItem();\n  const updatePosition = useUpdateItem();\n\n  const { onMouseDown } = useMove(({ status, origin, offset }) => {\n    if (status === 'start') {\n      setNewItem(null);\n      createNewItem({\n        ...newShapeProps,\n        x: origin.clientX - canvasLayout.x,\n        y: origin.clientY - canvasLayout.y\n      })\n        .then(item => {\n          setNewItem(item);\n          setItemIds(items => [...items, item.id]);\n          setSelectedIds([]);\n        });\n    }\n\n    if (status === 'moving') {\n      if (newItem) {\n        updatePosition({\n          ...newItem,\n          x: origin.clientX + offset.x - canvasLayout.x,\n          y: origin.clientY + offset.y - canvasLayout.y\n        })\n      }\n    }\n\n    if (status === 'end') {\n      if (newItem) {\n        setNewItem(null);\n        setSelectedIds([newItem.id]);\n      }\n    }\n  })\n\n\n\n  return <Button {...others} onMouseDown={onMouseDown} />;\n}\n"]},"metadata":{},"sourceType":"module"}